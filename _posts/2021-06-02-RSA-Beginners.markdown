---
layout: post
title: A Guide to RSA for Beginners
author: Arul Kumaran
permalink: /rsa-guide-beginners.html
---

Hi guys! Today I'll try to explain RSA in relatively simple terms. RSA is a key cryptography concept that feature in most CTFs. It might seem a little intimidating to beginners, especially with the rather complicated math involved. But rest assured, I hope that this guide will help to simplify things. Now let's dive right into it.

## A small introduction into RSA
RSA is a public-key cryptosystem that is widely used for secure data transmission. The acronym RSA comes from the surnames of Ron Rivest, Adi Shamir and Leonard Adleman, who publicly described the algorithm in 1977. 


In a public-key cryptosystem, the encryption key is public and different from the decryption key, which is kept secret (private). 

It makes use of the [prime-number trapdoor function](https://en.wikipedia.org/wiki/Trapdoor_function), where it is easy to compute the product of two prime numbers, but much harder to factorise it to give prime numbers, especially for very big numbers. 

## How the Math Works 
You can check out this Wikipedia article [here](https://simple.wikipedia.org/wiki/RSA_algorithm#Generating_keys), which actually explains the math behind RSA in detail. Do note that a bit of modular math and congruence relation knowledge may be required to fully understand this.

## Attacks to crack RSA



### Cube Root Attack (Small public exponent)
This attack is often used when the ```e``` value is small (say single digit). Let's see how this attack can be used to crack RSA implementations which use small public exponents.

Here's a sample problem to illustrate this example:
```bash
n = 81832507579458804740250584856923933092398801685885683858740598563784998986420046289169539484692213329249102876941392571693602184898624601614151420131581689452549417902911480947066578195782197823307860997361580966665089526326483752568366293605132381827954870366511712131028081177062838287529180851266732989497
c = 186035579992453204660167654731539505540120087566437631356217089894239617370847231609614206764208623183075851675884383009415698552997259734642161918768122812546137099960045259689649922538369565123709665455527752800635284847292158024526879370134702068906005612874893
e = 5
```
Rightaway, you can tell that this RSA implementation is bad as it uses a small exponent. Hence, we can use the Cube Root Attack to crack this.

**The Math**


$$ \begin{equation} c \equiv m^{e} \pmod N
\end{equation} $$


$$\begin{equation} c = m^e + kn (k \in ℤ) \end{equation} $$

Using the properties of modulo math, we derive the 2nd equation from the 1st. Since the value of e is really small (2 in this case), $ m^e $ works out to be really small. It seems that c and n are of similar size, so the value of k wouldn’t be too big hence it is possible to bruteforce for k.

Hence, we can easily rearrange the equation to get:


$$ \begin{equation} 
m = \sqrt[e]{c + k \cdot N}
\end{equation} $$


**The Script**

Now, we convert all these math concepts into our script, and we make use of our computer's power to help us bruteforce for the value of ```k```.

```python                              
from Crypto.Util.number import long_to_bytes
import gmpy2
import math
N = 81832507579458804740250584856923933092398801685885683858740598563784998986420046289169539484692213329249102876941392571693602184898624601614151420131581689452549417902911480947066578195782197823307860997361580966665089526326483752568366293605132381827954870366511712131028081177062838287529180851266732989497
e = 5
c = 186035579992453204660167654731539505540120087566437631356217089894239617370847231609614206764208623183075851675884383009415698552997259734642161918768122812546137099960045259689649922538369565123709665455527752800635284847292158024526879370134702068906005612874893

for k in range(0, 100000):
    m, t = gmpy2.iroot(c + k * N, e)
    if t:
        print(long_to_bytes(m))

```

And thus, we get the flag ```xxdydx{5m411_3xp0n3n7}```.

I hope with this, you have gotten an understanding into how Cube Root Attacks work, which is one of the simplest attacks used in RSA.

### Wiener Attack (Very large public exponent)


This attack is often used when a small private key (```d```) is used, often leading to a very large public exponent (```e```), sometimes as big as the modulus. 

Here's a sample problem:
```bash
n = 13704044832982292138395293766088413802848766696644681657989345648894307723945223260343949171705289793010442774065636046758834301006600656747553732002162894939273006424207989120611833238240923807366554841711183420216945437415961153960094592268784605121352361193425452780806466204619466742707267232257961818470285175851985227359835748601358045311793424386509746386595159562306722822079463647698598960652225445875077492633632010490587862704242764441744589267868404206164783432637852761334239604216347630356677596978234675737589246551120390571732510435614967325503986534325883291103328316168149236405105688473830080862177
e = 31853764682752559836706569837484301725651302628464025674092531295008821814438422598774435580749172569773400017970206952362997692325938113382519281111787457501999999650954078859365719161348435739410815940045733895389467468054781312667556867621739454410956782913329509718709566185280706198292535867176662879975912523514453252654467471805631717503384918290800891334447091017561484745847402618777537364154368951548571516909469743821463157123635350458830956380255948566466144030833961497468043286051595984714140223822548157499428068136519635273994712698521102688868435319667263809339762500035697002016549186916519108917603
c = 2241287056775250403738434452363598789742608867060801677763572233298639695715701463119531113593421834897758950202113838694318091826284915910476782176437347425950342835162606572468361230425686288332083329771527234968864894020407952101523691943142819592413793652638168070036096090317398273982949929122350496956713888535142025139409667462450632575085617031477368269697075161832317831994081328431405837378666098354106686822673930146846995737053014621066225289588727920479747553392920755793772708167510933765022166554749118833879456138543087426339817576703393935447141570412147728554829735844184716481598193302148221928749
```

As you can see, the public exponent value is really big, almost as big or bigger than the modulus.

Hence, we can exploit the [Wiener attack](https://en.wikipedia.org/wiki/Wiener%27s_attack). The math behind it  is really complicated (even I don't understand it LOL), but fortunately there's a Wiener attack function available on Python, so if we use that, we can easily find the d value, hence enabling us to decrypt the ciphertext. Let's get to work!

Here's my script.
```python
from Crypto.Util.number import long_to_bytes
import gmpy2
import math
import owiener
n = 0x8da7d2ec7bf9b322a539afb9962d4d2ebeb3e3d449d709b80a51dc680a14c87ffa863edfc7b5a2a542a0fa610febe2d967b58ae714c46a6eccb44cd5c90d1cf5e271224aa3367e5a13305f2744e2e56059b17bf520c95d521d34fdad3b0c12e7821a3169aa900c711e6923ca1a26c71fc5ac8a9ff8c878164e2434c724b68b508a030f86211c1307b6f90c0cd489a27fdc5e6190f6193447e0441a49edde165cf6074994ea260a21ea1fc7e2dfb038df437f02b9ddb7b5244a9620c8eca858865e83bab3413135e76a54ee718f4e431c29d3cb6e353a75d74f831bed2cc7bdce553f25b617b3bdd9ef901e249e43545c91b0cd8798b27804d61926e317a2b745
e = 0x86d357db4e1b60a2e9f9f25e2db15204c820b6e8d8d04d29db168c890bc8a6c1e31b9316c9680174e128515a00256b775a1a8ccca9c6936f1b4c2298c03032cda4dd8eca1145828d31466bf56bfcf0c6a8b4a1b2fb27de7a57fae7430048d7590734b2f05b6443ad60d89606802409d2fa4c6767ad42bffae01a8ef1364418362e133fa7b2770af64a68ad50ad8d2bd5cebb99ceb13368fb31a6e7503e753f8638e21a96af1b6498c18578ba89b98d70fa482ad137d28fe701b4b77baa25d5e84c81b26ee9bddf8cbb51a071c60dd57714de379cd4bc14932809ba18524a0a18e4133665cfc46e2c4fcfbc28e0a0957e5513a7307c422b87a6182d0b6a074b4d
c = 0x47405a6fb0ab87288d9ad87e7247d963c0368218e4686744b1071ab651f74c167dc861cd5553d691c978282f24b78bc370360c08f1102bc0835a88982334fc36e010fe4d4790f92f3a304757681268f2c0f717feec6a89f31503f22ba23d40156649bf7593a21beb088cc0ab7c517ac072d2051f88e2ff551b81e1e42d7c76f7ec9f8d740715dca3177e4765dfa4ca4ab61f13ab8de505674b5a3e26fb9ed82d9169735c4c314ff2277777860a0448d59aa587da3a3842fae46d847608042b0c638a6eb34af7c9cb4809af50d1496270abdfe67d3cd7cc7c6a57d5eb2d80309705b6ebd2fa40b82ac842b7e6415ca30c2828a0569c8d5b91dd4218a2155251d3


d = owiener.attack(e, n)
m = gmpy2.powmod (c, d, n)
print("d =" , d)

print('message:', long_to_bytes(m))
```

Here's the flag: ```xxdydx{lAr93_3XpoN3n7_15_8ad_lOL}```

To be continued...
